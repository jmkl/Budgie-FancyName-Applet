#!/usr/bin/env python3

# Copyright (C) 2016 Ikey Doherty
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#  
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import gi.repository
gi.require_version('Budgie', '1.0')
gi.require_version('Wnck', '3.0')
from gi.repository import Budgie, Gdk, Gio, GLib, GObject, Wnck, Gtk

class MyFancyApplet(GObject.GObject, Budgie.Plugin):
    """ This is simply an entry point into your Budgie Applet implementation.
        Note you must always override Object, and implement Plugin.
    """

    # Good manners, make sure we have unique name in GObject type system
    __gtype_name__ = "budgie-fancyname-applet"

    def __init__(self):
        """ Initialisation is important.
        """
        GObject.Object.__init__(self)

    def do_get_panel_widget(self, uuid):
        """ This is where the real fun happens. Return a new Budgie.Applet
            instance with the given UUID. The UUID is determined by the
            BudgiePanelManager, and is used for lifetime tracking.
        """
        return MyFancyAppletApplet(uuid)

class MyFancyAppletSettings(Gtk.Grid):
    """ This class provides in interface for your Budgie Applet to dconf.
        The setting object is derived from your applet UUID and base settings
        from your gsettings schema.
    """
    def __init__(self, setting):
        super().__init__(row_spacing=8)
        self.setting = setting

        # Add a label, and a switch to the settings page
        label = Gtk.Label(_("Enable Switch"), halign=Gtk.Align.START)
        notify_switch = Gtk.Switch(halign=Gtk.Align.END, hexpand=True)
        # Add another label and a text entry box to the page
        label2 = Gtk.Label(_("Text entry"), halign=Gtk.Align.START)
        entry = Gtk.Entry()
        entry.set_width_chars(40)

        # Get the current / Default value of the text entry
        entry.set_text(setting.get_string("text-entry"))

        # Arrange your objects on the grid.
        # Properties are explained on the gnome developer page
        # [https://developer.gnome.org/gtk3/stable/GtkGrid.html#gtk-grid-attach]
        self.attach(label, 0, 0, 1, 1)
        self.attach(notify_switch, 1, 0, 1, 1)
        self.attach(label2, 0, 1, 1, 1)
        self.attach(entry, 1, 1, 1, 1)

        # Connect changes in the settings panel to update your dconf settings
        #
        # Active is a property of switches being enabled/disabled
        setting.bind("enable-switch", notify_switch, "active",
                          Gio.SettingsBindFlags.DEFAULT)
        # Text is the value of the entry box that updates when changed
        setting.bind("text-entry", entry, 'text',
                     Gio.SettingsBindFlags.DEFAULT)

        # Show all the widgets we have added
        self.show_all()


class MyFancyAppletApplet(Budgie.Applet):
    """ Budgie.Applet is in fact a Gtk.Bin """

    fancylabel = None

    def __init__(self, uuid):
        Budgie.Applet.__init__(self)
        self.uuid = uuid

        # Ensure schema and prefix is set properly
        self.set_settings_prefix("/com/solus/budgie-fancyname")
        self.set_settings_schema("com.solus.budgie-fancyname")
        self.settings = self.get_applet_settings(self.uuid)

        self.fancylabel =Gtk.Label()
        self.fancylabel.set_markup(self.settings["text-entry"])
        self.add(self.fancylabel)
        self.settings.connect("changed",self.settings_onchanged)


        self.show_all()

    def settings_onchanged(self,settings,key):
        self.fancylabel.set_markup(self.settings["text-entry"])


    def do_get_settings_ui(self):
        """Return the applet settings with given uuid"""
        return MyFancyAppletSettings(self.get_applet_settings(self.uuid))

    def do_supports_settings(self):
        """Return True if support setting through Budgie Setting,
        False otherwise.
        """
        return True
